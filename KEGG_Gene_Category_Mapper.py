#! /usr/bin/env python
# author Zhongjie Wang

#################### Description ######################
### 
###  Map genes to KEGG annotations and categories   ###
###  Get the most common function for each gene     ###
###  family generated by MCL                        ###
###                                                 ###
#######################################################


import sys
from collections import defaultdict
import argparse

# Function to create nested defaultdict
def nesteddict():
    return defaultdict(nesteddict)

# Function to find the most common element in a list
def most_common(alist):
    return max(set(alist), key=alist.count)

def main(args):
    # Reading input files using the provided command line arguments
    with open(args.input, 'r') as f1, \
         open(args.hierarchy, 'r') as f2, \
         open(args.mcl, 'r') as f3, \
         open(args.size, 'r') as f4, \
         open(args.output, 'w') as f5:
        
        # Dictionary of ortholog annotation result from KEGG with gene names
        kegg_anno_orthologs = f1.readlines()
        kegg_anno_dict = defaultdict(str)
        for line in kegg_anno_orthologs:
            ortholog_name = line.split('\t')[0]
            kegg_anno_dict[ortholog_name] = line

        # Dictionary of KEGG functional categories with each K number
        kegg_category_dict = nesteddict()
        ko_categories = f2.read()
        for A_level_category in ko_categories.split('A09')[1:]:
            A_level_category_name = 'A09' + A_level_category.split('\n')[0]
            for B_level_category in A_level_category.split('B  ')[1:]:
                B_level_category_name = B_level_category.split('\n')[0]
                for C_level_category in B_level_category.split('C    ')[1:]:
                    C_level_category_name = C_level_category.split('\n')[0]
                    D_level_category = '\n'.join(C_level_category.split('\n')[1:])
                    if D_level_category:
                        kegg_category_dict[A_level_category_name][B_level_category_name][C_level_category_name] = D_level_category

        # Dictionary of orthologs from MCL table
        mcl_orthologs = f3.readlines()
        ortholog_dict = {}
        for i, line in enumerate(mcl_orthologs, 1):
            ortholog_name = f'ortholog{i:04}'
            ortholog_dict[ortholog_name] = line.strip()

        # Mapping gene names to kegg annotation and corresponding kegg categories
        ortholog_list = f4.readlines()
        f5.write(ortholog_list[0])
        for line in ortholog_list[1:]:
            ortholog_name = line.split('\t')[0]
            gene_names = ortholog_dict[ortholog_name].split('\t')
            ortholog_knumber_list = [kegg_anno_dict[gene_name].split('\t')[1] for gene_name in gene_names]
            ortholog_knumber_list_good = list(filter(None, ortholog_knumber_list))
            
            if ortholog_knumber_list_good:
                most_common_knumber = most_common(ortholog_knumber_list_good)
                for A, B_vals in kegg_category_dict.items():
                    for B, C_vals in B_vals.items():
                        for C, K_function_vals in C_vals.items():
                            for K_function in K_function_vals.split('\n'):
                                if most_common_knumber in K_function:
                                    f5.write(f"{line.strip()}\t{A}\t{B}\t{C}\t{K_function.strip('D      ')}\n")
            else:
                f5.write(f"{line.strip()}\tNA\tNA\tNA\tNA\n")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Map genes to KEGG annotations and categories and get the most common function for each family")
    parser.add_argument('--input', '-i', required=True, help="Input file for KO definition from e.g. BlastKOALA")
    parser.add_argument('--hierarchy', required=True, help="KEGG Hierarchy file (e.g., ko00001.keg)")
    parser.add_argument('--mcl', required=True, help="MCL output file (ortholog gene families)")
    parser.add_argument('--size', required=True, help="Gene family size file (gene abundance of each family in each genome)")
    parser.add_argument('--output', '-o' required=True, help="Output file")

    args = parser.parse_args()
    main(args)
